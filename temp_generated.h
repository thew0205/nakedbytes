// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEMP_H_
#define FLATBUFFERS_GENERATED_TEMP_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

struct Metadata;
struct MetadataBuilder;

struct DataEntry;
struct DataEntryBuilder;

struct Test;
struct TestBuilder;

enum Day : int8_t {
  Day_Monday = 0,
  Day_Tuesday = 1,
  Day_Wednesday = 2,
  Day_Thursday = 3,
  Day_Friday = 4,
  Day_Saturday = 5,
  Day_Sunday = 6,
  Day_MIN = Day_Monday,
  Day_MAX = Day_Sunday
};

inline const Day (&EnumValuesDay())[7] {
  static const Day values[] = {
    Day_Monday,
    Day_Tuesday,
    Day_Wednesday,
    Day_Thursday,
    Day_Friday,
    Day_Saturday,
    Day_Sunday
  };
  return values;
}

inline const char * const *EnumNamesDay() {
  static const char * const names[8] = {
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
    "Sunday",
    nullptr
  };
  return names;
}

inline const char *EnumNameDay(Day e) {
  if (::flatbuffers::IsOutRange(e, Day_Monday, Day_Sunday)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesDay()[index];
}

struct Metadata FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MetadataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INFO = 4
  };
  const ::flatbuffers::String *info() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INFO);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INFO) &&
           verifier.VerifyString(info()) &&
           verifier.EndTable();
  }
};

struct MetadataBuilder {
  typedef Metadata Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_info(::flatbuffers::Offset<::flatbuffers::String> info) {
    fbb_.AddOffset(Metadata::VT_INFO, info);
  }
  explicit MetadataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Metadata> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Metadata>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Metadata> CreateMetadata(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> info = 0) {
  MetadataBuilder builder_(_fbb);
  builder_.add_info(info);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Metadata> CreateMetadataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *info = nullptr) {
  auto info__ = info ? _fbb.CreateString(info) : 0;
  return CreateMetadata(
      _fbb,
      info__);
}

struct DataEntry FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DataEntryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_STAFF = 6,
    VT_EXTRA = 8
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  bool staff() const {
    return GetField<uint8_t>(VT_STAFF, 0) != 0;
  }
  const Metadata *extra() const {
    return GetPointer<const Metadata *>(VT_EXTRA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_STAFF, 1) &&
           VerifyOffset(verifier, VT_EXTRA) &&
           verifier.VerifyTable(extra()) &&
           verifier.EndTable();
  }
};

struct DataEntryBuilder {
  typedef DataEntry Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(DataEntry::VT_NAME, name);
  }
  void add_staff(bool staff) {
    fbb_.AddElement<uint8_t>(DataEntry::VT_STAFF, static_cast<uint8_t>(staff), 0);
  }
  void add_extra(::flatbuffers::Offset<Metadata> extra) {
    fbb_.AddOffset(DataEntry::VT_EXTRA, extra);
  }
  explicit DataEntryBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DataEntry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DataEntry>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DataEntry> CreateDataEntry(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    bool staff = false,
    ::flatbuffers::Offset<Metadata> extra = 0) {
  DataEntryBuilder builder_(_fbb);
  builder_.add_extra(extra);
  builder_.add_name(name);
  builder_.add_staff(staff);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DataEntry> CreateDataEntryDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    bool staff = false,
    ::flatbuffers::Offset<Metadata> extra = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return CreateDataEntry(
      _fbb,
      name__,
      staff,
      extra);
}

struct Test FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TAGS = 4,
    VT_TZ = 6,
    VT_DAYS = 8,
    VT_COORD = 10,
    VT_DATA = 12
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *tags() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TAGS);
  }
  int32_t tz() const {
    return GetField<int32_t>(VT_TZ, 0);
  }
  const ::flatbuffers::Vector<int8_t> *days() const {
    return GetPointer<const ::flatbuffers::Vector<int8_t> *>(VT_DAYS);
  }
  const ::flatbuffers::Vector<double> *coord() const {
    return GetPointer<const ::flatbuffers::Vector<double> *>(VT_COORD);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<DataEntry>> *data() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<DataEntry>> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TAGS) &&
           verifier.VerifyVector(tags()) &&
           verifier.VerifyVectorOfStrings(tags()) &&
           VerifyField<int32_t>(verifier, VT_TZ, 4) &&
           VerifyOffset(verifier, VT_DAYS) &&
           verifier.VerifyVector(days()) &&
           VerifyOffset(verifier, VT_COORD) &&
           verifier.VerifyVector(coord()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.VerifyVectorOfTables(data()) &&
           verifier.EndTable();
  }
};

struct TestBuilder {
  typedef Test Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_tags(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags) {
    fbb_.AddOffset(Test::VT_TAGS, tags);
  }
  void add_tz(int32_t tz) {
    fbb_.AddElement<int32_t>(Test::VT_TZ, tz, 0);
  }
  void add_days(::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> days) {
    fbb_.AddOffset(Test::VT_DAYS, days);
  }
  void add_coord(::flatbuffers::Offset<::flatbuffers::Vector<double>> coord) {
    fbb_.AddOffset(Test::VT_COORD, coord);
  }
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<DataEntry>>> data) {
    fbb_.AddOffset(Test::VT_DATA, data);
  }
  explicit TestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Test> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Test>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Test> CreateTest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags = 0,
    int32_t tz = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> days = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<double>> coord = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<DataEntry>>> data = 0) {
  TestBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_coord(coord);
  builder_.add_days(days);
  builder_.add_tz(tz);
  builder_.add_tags(tags);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Test> CreateTestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *tags = nullptr,
    int32_t tz = 0,
    const std::vector<int8_t> *days = nullptr,
    const std::vector<double> *coord = nullptr,
    const std::vector<::flatbuffers::Offset<DataEntry>> *data = nullptr) {
  auto tags__ = tags ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*tags) : 0;
  auto days__ = days ? _fbb.CreateVector<int8_t>(*days) : 0;
  auto coord__ = coord ? _fbb.CreateVector<double>(*coord) : 0;
  auto data__ = data ? _fbb.CreateVector<::flatbuffers::Offset<DataEntry>>(*data) : 0;
  return CreateTest(
      _fbb,
      tags__,
      tz,
      days__,
      coord__,
      data__);
}

inline const Test *GetTest(const void *buf) {
  return ::flatbuffers::GetRoot<Test>(buf);
}

inline const Test *GetSizePrefixedTest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Test>(buf);
}

inline bool VerifyTestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Test>(nullptr);
}

inline bool VerifySizePrefixedTestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Test>(nullptr);
}

inline void FinishTestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Test> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Test> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_TEMP_H_
